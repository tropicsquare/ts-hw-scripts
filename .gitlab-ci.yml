variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - run_tests
  - build_docs
  - deploy

.only-default: &only-default
  only:
    - master
    - merge_requests
    - tags

.only-stable: &only-stable
  only:
    - master
    - tags

###################################################################################################
# Runs test for HW scripts themselves.
###################################################################################################
run_tests:
    <<: *only-default
    stage: run_tests
    tags:
        - shell
    allow_failure: true
    script:
        - pwd
        - source ./setup_env
        - pytest -s --measure-coverage --color=no --junit-xml=report.xml
        - coverage report --sort=-cover
        - coverage html
    # Clean-up VCS builds after the tests since they take lot of space!
    after_script:
        - cd tests
        - ./clean_up_all.sh
    coverage: '/TOTAL\s+(?:\d+\s+){4}(\d+\.?\d+)%/'
    artifacts:
        when: always
        paths:
            - htmlcov
        reports:
            junit: report.xml


###################################################################################################
# Builds user manual.
###################################################################################################
build_docs:
    <<: *only-default
    tags:
        - shell
    stage: build_docs
    script:
        - source ./setup_env
        - cd doc/ts_sim_user_guide
        - ts_latex_build.py ts_sim_user_guide.tex

        - cd ../ts_pwr_user_guide
        - ts_latex_build.py ts_pwr_user_guide.tex

        - cd ../ts_mem_map_generate_user_guide
        - ts_latex_build.py ts_mem_map_generate_user_guide.tex

        - cd ../ts_syn_user_guide
        - ts_latex_build.py ts_syn_user_guide.tex

    after_script:
        - echo "Publishing pages..."
        - mkdir -p public
        - cp doc/ts_sim_user_guide/build/pdf/ts_sim_user_guide.pdf public
        - cp doc/ts_pwr_user_guide/build/pdf/ts_pwr_user_guide.pdf public
        - cp doc/ts_mem_map_generate_user_guide/build/pdf/ts_mem_map_generate_user_guide.pdf public
        - cp doc/ts_syn_user_guide/build/pdf/ts_syn_user_guide.pdf public

    artifacts:
        paths:
            - public

###################################################################################################
# Deploy on Tropic Square machines
###################################################################################################
tropic_install:
    <<: *only-stable
    stage: deploy
    when: manual
    tags:
        - shell
    script:
        - export VERSION=`git describe --tags --abbrev=0`
        - export DEST_FOLDER=/tools/tropic/ts-hw-scripts

        # Will fail if concrete version directory already exists. This will avoid
        # re-placing older version with new if we forget to add new tag!
        - mkdir -p $DEST_FOLDER
        - mkdir $DEST_FOLDER/$VERSION

        # Publish documentation
        - mkdir $DEST_FOLDER/$VERSION/doc
        - cp public/ts_sim_user_guide.pdf $DEST_FOLDER/$VERSION/doc/
        - cp public/ts_pwr_user_guide.pdf $DEST_FOLDER/$VERSION/doc/
        - cp public/ts_mem_map_generate_user_guide.pdf $DEST_FOLDER/$VERSION/doc/
        - cp public/ts_syn_user_guide.pdf $DEST_FOLDER/$VERSION/doc/

        # Add version to source files
        - echo "__version__ = \"$(git describe --tags)\"" > scripts/internal/__version__.py

        # Publish scripts themselves
        - cp -r scripts $DEST_FOLDER/$VERSION

###################################################################################################
# Filter files into 'public' branch so that it can be released on Github.
#
# Mirrors master branch, but filters out files that should not be published.
###################################################################################################
public_filter:
    <<: *only-stable
    stage: deploy
    tags:
        - shell
    script:
        - source ./setup_env

        - git branch -D public || true
        - git branch public
        - git checkout public

        # Filter out folders with sensitive information:
        #   - examples
        #   - tests
        #   - templates/ts_pdk_config.yml
        #   - templates/ts_design_config.yml
        # TODO: Wrap the filtration to some common script and the filtered paths to some standardized file!
        - git-filter-repo --path example --path templates/ts_design_config.yml --path templates/ts_pdk_config.yml --path tests --invert-paths --force

        # Force push to "public" branch
        # Authenticate via Project token passed via CI/CD variable
        - git config --global user.email "${GITLAB_USER_EMAIL}"
        - git config --global user.name "${GITLAB_USER_NAME}"
        - git remote remove origin || true
        - git remote add origin https://oauth2:$CI_BOT_ACCESS_TOKEN@tropic-gitlab.corp.sldev.cz/internal/development-environment/ts-hw-scripts.git
        - git remote -v
        - git push origin public --force

        # Force push to GITHUB
        - git remote remove github_mirror || true
        - git remote add github_mirror git@github.com:tropicsquare/ts-hw-scripts.git
        - git push --force github_mirror -u public
        - git push --force --tags

